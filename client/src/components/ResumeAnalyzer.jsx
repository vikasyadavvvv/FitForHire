import React, { useState } from "react";
import { useAuth } from "@clerk/clerk-react";
import { useLocation, useNavigate } from "react-router-dom";
const fadeInStyle = { animation: "fadeIn 0.6s ease forwards", opacity: 0 };
import { ClipboardDocumentIcon, AcademicCapIcon, PuzzlePieceIcon, DocumentTextIcon, UserGroupIcon, LightBulbIcon, PresentationChartLineIcon, ChatBubbleLeftRightIcon, UserCircleIcon } from "@heroicons/react/24/outline";
import {
  PDFDownloadLink,
  Page,
  Text,
  View,
  Document,
  StyleSheet,
} from "@react-pdf/renderer";


const styles = StyleSheet.create({
  page: { padding: 30, fontSize: 11, color: "#333", position: "relative" },
  h1: { fontSize: 18, marginBottom: 10, fontWeight: "bold" },
  h2: { fontSize: 14, marginTop: 14, marginBottom: 6, fontWeight: "bold" },
  p:  { marginBottom: 4, lineHeight: 1.4 },
  listItem: { marginLeft: 12, marginBottom: 2 },
  watermark: {
    position: "absolute",
    bottom: 10,
    right: 30,
    fontSize: 8,
    color: "#999",
    fontStyle: "italic",
  },
});


const ReportDocument = ({ analysis, jobDescription }) => (
  <Document>
    <Page size="A4" style={styles.page} wrap>
      <Text style={styles.h1}>FitForHire – Résumé Analysis Report</Text>

      <Text style={styles.h2}>Overall Match Score</Text>
      <Text style={styles.p}>{analysis.score}% match to the job description</Text>

      <Text style={styles.h2}>Top 3 Improvement Areas</Text>
      {analysis.actionableSummary.topActions.slice(0, 3).map((t, i) => (
        <Text key={i} style={styles.listItem}>• {t}</Text>
      ))}

      <Text style={styles.h2}>Skill Gap Analysis</Text>
      {analysis.skillGapAnalysis.map(({ skill, importance }, i) => (
        <Text key={i} style={styles.listItem}>• {skill} ({importance})</Text>
      ))}

      <Text style={styles.h2}>Experience Match Breakdown</Text>
      {analysis.experienceMatch.map(
        ({ skillOrResponsibility, yearsExperience }, i) => (
          <Text key={i} style={styles.listItem}>
            • {skillOrResponsibility}: {yearsExperience} yr{yearsExperience !== 1 && "s"}
          </Text>
        )
      )}

      <Text style={styles.h2}>Job Description (reference)</Text>
      <Text style={styles.p}>{jobDescription}</Text>

      {/* ✅ Watermark at the bottom */}
      <Text style={styles.watermark}>__Generated by FitForHire</Text>
    </Page>
  </Document>
);



export default function ResumeAnalyzer() {
  const location = useLocation();
  const { resumeText } = location.state || {};
  const { getToken } = useAuth();

  const [jobDescription, setJobDescription] = useState("");
  const [analysis, setAnalysis] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const navigate=useNavigate()

  const handleAnalyze = async () => {
    if (!jobDescription.trim()) {
      setError("Please enter a job description.");
      return;
    }
    setLoading(true);
    setError("");
    setAnalysis(null);

    try {
      const token = await getToken();

      const res = await fetch("https://fitforhire.onrender.com/api/resume/analyze", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          resumeText,
          jobDescription,
        }),
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || "Failed to analyze resume");
      }

      const data = await res.json();
      setAnalysis(data);
    } catch (err) {
      console.error(err);
      setError(err.message || "Failed to analyze resume.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-gray-900/90 backdrop-blur-md border border-gray-700 rounded-xl p-8 mt-6 max-w-5xl mx-auto shadow-lg text-gray-100">
      <h2 className="text-3xl font-bold mb-8 tracking-tight text-center text-white">
        FitForHire<span className="text-blue-500 text-1xl">✓</span>
      </h2>

      <textarea
        rows={6}
        placeholder="Paste or type the job description here… (Please avoid emojis or icons)"
        value={jobDescription}
        onChange={(e) => setJobDescription(e.target.value)}
        className="w-full p-4 bg-gray-800 border border-gray-700 rounded-lg mb-6 resize-y placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 text-lg"
      />

      <button
        onClick={handleAnalyze}
        disabled={loading || !jobDescription.trim()}
        className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-500 hover:to-indigo-500 disabled:from-gray-600 disabled:to-gray-600 text-white font-semibold px-6 py-3 rounded-lg transition-colors w-full sm:w-auto"
      >
        {loading ? "Analyzing…" : "Analyze Resume"}
      </button>

      {error && <p className="text-red-400 mt-4 text-center">{error}</p>}
      {analysis && (
  <div className="flex justify-end mb-6">
    <PDFDownloadLink
      document={<ReportDocument analysis={analysis} jobDescription={jobDescription} />}
      fileName="fitforhire_resume_report.pdf"
      className="bg-indigo-600 hover:bg-indigo-500 text-white font-semibold px-4 py-2 rounded-lg transition-colors mt-6"
    >
      {({ loading }) => (loading ? "Preparing PDF…" : "Download PDF Report")}
    </PDFDownloadLink>
  </div>
)}


      {analysis && (
        <div className="mt-10 space-y-10" style={{ ...fadeInStyle, opacity: 1 }}>
          {/* Match Score */}
          <div className="bg-gray-800 rounded-lg p-6 shadow-md">
            <h3 className="text-xl font-semibold mb-2 flex items-center gap-2">
              <PresentationChartLineIcon className="w-6 h-6 text-blue-400" />
              Overall Match Score
            </h3>
            <div className="w-full bg-gray-700 rounded-full h-5 overflow-hidden">
              <div
                className="bg-blue-500 h-5 rounded-full transition-all duration-700"
                style={{ width: `${analysis.score}%` }}
              />
            </div>
            <p className="mt-2 text-gray-300">
              Your resume matches <strong>{analysis.score}%</strong> of this job description.
            </p>
          </div>
           {analysis?.ats && (
  <div className="bg-gray-800 p-6 rounded-lg mt-6 shadow-md">
    <h3 className="text-xl font-bold mb-3">ATS Simulation Score</h3>
    <p className="text-gray-300 mb-4">
      <strong>{analysis.ats.score}%</strong> ATS friendliness
    </p>

    {analysis.ats.warnings.length > 0 && (
      <div className="bg-yellow-900 text-yellow-300 p-4 rounded">
        <h4 className="font-semibold mb-2">Potential Issues:</h4>
        <ul className="list-disc ml-5">
          {analysis.ats.warnings.map((w, i) => <li key={i}>{w}</li>)}
        </ul>
               <button
                onClick={() => navigate("/create-ats-resume")}
                className="mt-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition duration-300"
              >
                Improve with ATS Resume Builder
              </button>
      </div>

    )}
  </div>
)}

          {/* Top 3 Improvements */}
          <div className="bg-gray-800 rounded-lg p-6 shadow-md">
            <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
              <LightBulbIcon className="w-6 h-6 text-yellow-400" />
              Top 3 Improvement Areas
            </h3>
            <ol className="list-decimal list-inside space-y-1 text-gray-300">
              {analysis.actionableSummary.topActions.slice(0, 3).map((item, idx) => (
                <li key={idx}>{item}</li>
              ))}
            </ol>
          </div>

          {/* Dynamic Sections */}
          {[
            {
              title: "Detailed Skill Gap Analysis",
              icon: PuzzlePieceIcon,
              content: (
                <>
                  {analysis.skillGapAnalysis.map(
                    ({ skill, importance, resourceLinks, recommendedCertifications }, idx) => (
                      <div key={idx} className="mb-6 pl-4 sm:pl-5 border-l-4 border-blue-500 break-words">
                        <p className="font-semibold text-base sm:text-lg text-white">
                          {skill}
                          <span className="ml-2 text-sm text-gray-400">({importance})</span>
                        </p>
                        <p className="mt-2 font-semibold text-sm sm:text-base text-gray-200">Resources:</p>
                        <ul className="list-disc ml-5 sm:ml-6 text-blue-400 space-y-1">
                          {resourceLinks.map((link, i) => (
                            <li key={i} className="break-words max-w-full">
                              <a href={link} target="_blank" rel="noreferrer" className="underline hover:text-blue-300">
                                {link}
                              </a>
                            </li>
                          ))}
                        </ul>
                        <p className="mt-2 font-semibold text-sm sm:text-base text-gray-200">
                          Recommended Certifications:{" "}
                          <span className="italic">
                            {recommendedCertifications.length > 0
                              ? recommendedCertifications.join(", ")
                              : "None"}
                          </span>
                        </p>
                      </div>
                    )
                  )}
                </>
              ),
            },
            {
              title: "Experience Match Breakdown",
              icon: ClipboardDocumentIcon,
              content: (
                <ul className="list-disc ml-6 space-y-1 text-gray-300">
                  {analysis.experienceMatch.map(
                    ({ skillOrResponsibility, yearsExperience, transferableSkill, notes }, idx) => (
                      <li key={idx}>
                        <strong>{skillOrResponsibility}:</strong> {yearsExperience} yr{yearsExperience !== 1 && "s"}
                        {transferableSkill && " (transferable)"}
                        {notes && <em> — {notes}</em>}
                      </li>
                    )
                  )}
                </ul>
              ),
            },
            {
              title: "Education & Certification Alignment",
              icon: AcademicCapIcon,
              content: (
                <>
                  <p className="text-gray-300">{analysis.educationAndCertifications.matchAnalysis}</p>
                  {analysis.educationAndCertifications.suggestedCertifications.length > 0 && (
                    <p className="mt-2 font-semibold">
                      Suggested Certifications:{" "}
                      <span className="italic">{analysis.educationAndCertifications.suggestedCertifications.join(", ")}</span>
                    </p>
                  )}
                </>
              ),
            },
            {
              title: "Resume Formatting & ATS Tips",
              icon: DocumentTextIcon,
              content: <p className="text-gray-300">{analysis.resumeFormattingTips}</p>,
            },
            {
              title: "Soft Skills and Cultural Fit Suggestions",
              icon: UserGroupIcon,
              content: (
                <>
                  <p><strong>Matched:</strong> {analysis.softSkillsCulturalFit.matchedSoftSkills.join(", ") || "None"}</p>
                  <p><strong>Suggested:</strong> {analysis.softSkillsCulturalFit.suggestedSoftSkills.join(", ") || "None"}</p>
                </>
              ),
            },
            {
              title: "Actionable Summary & Next Steps",
              icon: LightBulbIcon,
              content: (
                <>
                  <p className="mb-1 font-semibold">Strengths:</p>
                  <ul className="list-disc ml-6 space-y-1">
                    {analysis.actionableSummary.strengths.map((s, idx) => <li key={idx}>{s}</li>)}
                  </ul>
                  <p className="mt-4 mb-1 font-semibold">Top Actions:</p>
                  <ul className="list-disc ml-6 space-y-1">
                    {analysis.actionableSummary.topActions.map((a, idx) => <li key={idx}>{a}</li>)}
                  </ul>
                </>
              ),
            },
            {
              title: "Example Phrases & Bullet Points",
              icon: ClipboardDocumentIcon,
              content: (
                <ul className="list-disc ml-6 space-y-1">
                  {analysis.exampleBulletPoints.map((p, idx) => (
                    <li key={idx} className="flex justify-between items-center">
                      <span>{p}</span>
                      <button
                        onClick={() => copyToClipboard(p)}
                        className="ml-2 text-blue-400 hover:text-blue-600"
                        title="Copy to clipboard"
                      >
                        📋
                      </button>
                    </li>
                  ))}
                </ul>
              ),
            },
            {
              title: "Job Description Keywords",
              icon: DocumentTextIcon,
              content: (
                <>
                  <p><strong>Required:</strong> {analysis.jobDescriptionKeywords.requiredKeywords.join(", ")}</p>
                  <p><strong>Missing:</strong> {analysis.jobDescriptionKeywords.missingKeywords.join(", ") || "None"}</p>
                </>
              ),
            },
            {
              title: "Interview Preparation Tips",
              icon: ChatBubbleLeftRightIcon,
              content: (
                <>
                  <p className="mb-1 font-semibold">Common Questions:</p>
                  <ul className="list-disc ml-6 space-y-1">
                    {analysis.interviewPrepTips.commonQuestions.map((q, idx) => <li key={idx}>{q}</li>)}
                  </ul>
                  <p className="mt-4 mb-1 font-semibold">Recommended Resources:</p>
                  <ul className="list-disc ml-6 space-y-1">
                    {analysis.interviewPrepTips.recommendedResources.map((r, idx) => <li key={idx}>{r}</li>)}
                  </ul>
                </>
              ),
            },
            {
              title: "Comparison with Top Candidates",
              icon: UserCircleIcon,
              content: <p className="text-gray-300">{analysis.candidateComparison}</p>,
            },
          ].map(({ title, icon: Icon, content }, idx) => (
            <section key={idx} className="bg-gray-800 rounded-lg p-6 shadow-md">
              <h3 className="text-xl font-semibold mb-4 flex items-center gap-2 text-white">
                <Icon className="w-6 h-6 text-blue-400" />
                {title}
              </h3>
              <div className="text-gray-300">{content}</div>
            </section>
          ))}
        </div>
      )}
     


      <style>{`
        @keyframes fadeIn {
          to { opacity: 1; }
        }
      `}</style>

      
    </div>

  );
}
